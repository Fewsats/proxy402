// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id
`

type CreateUserParams struct {
	Email          string
	Name           string
	GoogleID       string
	Proxy402Secret string
	PaymentAddress string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

// CreateUser creates a new user record.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.GoogleID,
		arg.Proxy402Secret,
		arg.PaymentAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at FROM users
WHERE email = $1
`

// GetUserByEmail returns a user by email.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.Proxy402Secret,
		&i.PaymentAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at FROM users
WHERE google_id = $1
`

// GetUserByGoogleID returns a user by Google ID.
func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByGoogleID, googleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.Proxy402Secret,
		&i.PaymentAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at FROM users
WHERE id = $1
`

// GetUserByID returns a user by ID.
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.Proxy402Secret,
		&i.PaymentAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPaymentAddress = `-- name: UpdateUserPaymentAddress :one
UPDATE users SET
    payment_address = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at
`

type UpdateUserPaymentAddressParams struct {
	ID             int64
	PaymentAddress string
	UpdatedAt      time.Time
}

// UpdateUserPaymentAddress updates a user's payment address.
func (q *Queries) UpdateUserPaymentAddress(ctx context.Context, arg UpdateUserPaymentAddressParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPaymentAddress, arg.ID, arg.PaymentAddress, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.Proxy402Secret,
		&i.PaymentAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProxySecret = `-- name: UpdateUserProxySecret :one
UPDATE users SET
    proxy_402_secret = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, email, name, google_id, proxy_402_secret, payment_address, created_at, updated_at
`

type UpdateUserProxySecretParams struct {
	ID             int64
	Proxy402Secret string
	UpdatedAt      time.Time
}

func (q *Queries) UpdateUserProxySecret(ctx context.Context, arg UpdateUserProxySecretParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserProxySecret, arg.ID, arg.Proxy402Secret, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.Proxy402Secret,
		&i.PaymentAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
