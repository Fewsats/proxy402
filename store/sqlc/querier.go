// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
)

type Querier interface {
	// CheckShortCodeExists checks if a short code already exists.
	CheckShortCodeExists(ctx context.Context, shortCode string) (bool, error)
	// CreatePaidRoute creates a new paid route.
	CreatePaidRoute(ctx context.Context, arg CreatePaidRouteParams) (PaidRoute, error)
	// CreatePurchase creates a new purchase record.
	CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (int64, error)
	// CreateUser creates a new user record.
	CreateUser(ctx context.Context, arg CreateUserParams) (int64, error)
	// DeletePaidRoute soft-deletes a paid route.
	DeletePaidRoute(ctx context.Context, arg DeletePaidRouteParams) error
	// GetDailyStats retrieves daily purchase stats for a specific user.
	GetDailyStats(ctx context.Context, arg GetDailyStatsParams) ([]GetDailyStatsRow, error)
	// GetEnabledPaidRouteByShortCode returns an enabled paid route by its short code.
	GetEnabledPaidRouteByShortCode(ctx context.Context, shortCode string) (PaidRoute, error)
	// GetPaidRouteByID returns a paid route by ID.
	GetPaidRouteByID(ctx context.Context, id int64) (PaidRoute, error)
	// GetPaidRouteByShortCode returns a paid route by its short code.
	GetPaidRouteByShortCode(ctx context.Context, shortCode string) (PaidRoute, error)
	// GetPurchaseByID returns a purchase by ID.
	GetPurchaseByID(ctx context.Context, id int64) (Purchase, error)
	// GetTotalStats retrieves total purchase stats for a specific user.
	GetTotalStats(ctx context.Context, userID int64) (GetTotalStatsRow, error)
	// GetUserByEmail returns a user by email.
	GetUserByEmail(ctx context.Context, email string) (User, error)
	// GetUserByGoogleID returns a user by Google ID.
	GetUserByGoogleID(ctx context.Context, googleID string) (User, error)
	// GetUserByID returns a user by ID.
	GetUserByID(ctx context.Context, id int64) (User, error)
	// IncrementAccessCount increments the access_count for a route.
	IncrementAccessCount(ctx context.Context, arg IncrementAccessCountParams) error
	// IncrementAttemptCount increments the attempt_count for a route.
	IncrementAttemptCount(ctx context.Context, arg IncrementAttemptCountParams) error
	// IncrementPaymentCount increments the payment_count for a route.
	IncrementPaymentCount(ctx context.Context, arg IncrementPaymentCountParams) error
	// ListPurchasesByUserID retrieves all purchases for a specific user via paid_routes.
	ListPurchasesByUserID(ctx context.Context, userID int64) ([]Purchase, error)
	// ListUserPaidRoutes returns all paid routes for a specific user.
	ListUserPaidRoutes(ctx context.Context, userID int64) ([]PaidRoute, error)
	// UpdatePaidRoute updates a paid route.
	UpdatePaidRoute(ctx context.Context, arg UpdatePaidRouteParams) error
	// UpdateUserPaymentAddress updates a user's payment address.
	UpdateUserPaymentAddress(ctx context.Context, arg UpdateUserPaymentAddressParams) (User, error)
	UpdateUserProxySecret(ctx context.Context, arg UpdateUserProxySecretParams) (User, error)
}

var _ Querier = (*Queries)(nil)
